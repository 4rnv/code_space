[
    {
        "title": "Find the Runner-Up Score",
        "description": "In a sports competition, participants receive scores, and we need to determine the second-highest score (runner-up). Given a list of scores, return the second-highest unique value.",
        "difficulty": "Easy",
        "task": "Store the scores in a list, remove duplicates, and find the second-highest score.",
        "input_format": "The first line contains an integer, n, denoting the number of scores. The second line contains n space-separated integers representing the scores.",
        "constraints": "2 ≤ n ≤ 100, -100 ≤ scores[i] ≤ 100",
        "output_format": "Print the runner-up score.",
        "time": 5,
        "examples": [
            {
                "input": "5\n2 3 6 6 5",
                "output": "5",
                "explanation": "The highest score is 6, and the second-highest is 5."
            }
        ],
        "test_cases": [
            { "input": "4\n1 2 3 3", "output": "2" },
            { "input": "6\n5 1 5 4 3 2", "output": "4" }
        ]
    },
    {
        "title": "Odd or Even: Weirdness Check",
        "description": "A number's behavior can be 'weird' based on specific conditions. If the number is odd, it's 'Weird'. If it's even and in the range [2,5], it's 'Not Weird'. If it's even and in the range [6,20], it's 'Weird'. If it's even and greater than 20, it's 'Not Weird'.",
        "difficulty": "Easy",
        "task": "Given an integer, determine whether it is 'Weird' or 'Not Weird' based on its properties.",
        "input_format": "A single integer n.",
        "constraints": "1 ≤ n ≤ 100",
        "output_format": "Print 'Weird' or 'Not Weird'.",
        "time": 5,
        "examples": [
            { "input": "3", "output": "Weird", "explanation": "3 is odd, so it's classified as 'Weird'." }
        ],
        "test_cases": [
            { "input": "4", "output": "Not Weird" },
            { "input": "18", "output": "Weird" }
        ]
    },
    {
        "title": "Student Marks Percentage",
        "description": "A student receives marks in three subjects, and we need to calculate the overall percentage. The percentage is computed as the average of the three marks, rounded to two decimal places.",
        "difficulty": "Easy",
        "task": "Compute and print the percentage of marks obtained by a student.",
        "input_format": "Three space-separated integers representing marks.",
        "constraints": "0 ≤ marks ≤ 100",
        "output_format": "Print the percentage up to 2 decimal places.",
        "time": 5,
        "examples": [
            { "input": "80 90 100", "output": "90.00", "explanation": "The average is (80+90+100)/3 = 90.00." }
        ],
        "test_cases": [
            { "input": "70 85 90", "output": "81.67" },
            { "input": "60 75 80", "output": "71.67" }
        ]
    },
    {
        "title": "Fibonacci Sequence",
        "description": "The Fibonacci sequence starts with 0 and 1, with each subsequent number being the sum of the two preceding ones. Given n, generate the first n terms of the sequence.",
        "difficulty": "Easy",
        "task": "Compute and print the first n numbers in the Fibonacci sequence.",
        "input_format": "A single integer n.",
        "constraints": "1 ≤ n ≤ 30",
        "output_format": "Print the Fibonacci sequence up to n terms.",
        "time": 5,
        "examples": [
            { "input": "5", "output": "0 1 1 2 3", "explanation": "Fibonacci sequence starts with 0, 1, and continues as the sum of the previous two terms." }
        ],
        "test_cases": [
            { "input": "3", "output": "0 1 1" },
            { "input": "6", "output": "0 1 1 2 3 5" }
        ]
    },
    {
        "title": "Tuple Hashing",
        "description": "A tuple is an immutable data structure. Given n integers, create a tuple and compute its hash value.",
        "difficulty": "Easy",
        "task": "Compute the hash of a tuple formed from the given integers.",
        "input_format": "The first line contains an integer n. The second line contains n space-separated integers.",
        "constraints": "2 ≤ n ≤ 1000, -100 ≤ elements ≤ 100",
        "output_format": "Print the hash value of the tuple.",
        "time": 5,
        "examples": [
            { "input": "3\n1 2 3", "output": "529344067295497451" }
        ],
        "test_cases": [
            { "input": "2\n10 20", "output": "6909455589863252355" },
            { "input": "4\n0 -1 2 -3", "output": "-5060604852126660282" }
        ]
    },
    {
        "title": "Sum of Two Numbers",
        "description": "Given two integers, return their sum.",
        "difficulty": "Easy",
        "task": "Compute the sum of the given integers.",
        "input_format": "Two space-separated integers.",
        "constraints": "-10^9 ≤ a, b ≤ 10^9",
        "output_format": "Print the sum of the two integers.",
        "time": 5,
        "examples": [
            { "input": "3 7", "output": "10", "explanation": "3 + 7 = 10." }
        ],
        "test_cases": [
            { "input": "-5 10", "output": "5" },
            { "input": "100000 200000", "output": "300000" }
        ]
    },
    {
        "title": "Palindrome String",
        "description": "A palindrome is a string that reads the same backward as forward. Given a string, determine if it is a palindrome.",
        "difficulty": "Easy",
        "task": "Check if the given string is a palindrome.",
        "input_format": "A single string.",
        "constraints": "1 ≤ length of string ≤ 100",
        "output_format": "Print 'YES' if the string is a palindrome, otherwise print 'NO'.",
        "time": 5,
        "examples": [
            { "input": "racecar", "output": "YES", "explanation": "'racecar' is the same forward and backward." }
        ],
        "test_cases": [
            { "input": "hello", "output": "NO" },
            { "input": "madam", "output": "YES" }
        ]
    },
    {
        "title": "Check Prime",
        "description": "A prime number is a natural number greater than 1 that has no divisors other than 1 and itself. Given a number n, determine whether it is prime.",
        "difficulty": "Easy",
        "task": "Check if a number is prime and return 'YES' if it is, otherwise return 'NO'.",
        "input_format": "A single integer n.",
        "constraints": "2 ≤ n ≤ 10^6",
        "output_format": "Print 'YES' if the number is prime, otherwise print 'NO'.",
        "time": 5,
        "examples": [
            { "input": "7", "output": "YES", "explanation": "7 has no divisors other than 1 and 7." }
        ],
        "test_cases": [
            { "input": "10", "output": "NO" },
            { "input": "13", "output": "YES" }
        ]
    },
    {
        "title": "Reverse a String",
        "description": "Given a string, reverse it and print the reversed version.",
        "difficulty": "Easy",
        "task": "Reverse a given string.",
        "input_format": "A single string.",
        "constraints": "1 ≤ length of string ≤ 100",
        "output_format": "Print the reversed string.",
        "time": 5,
        "examples": [
            { "input": "hello", "output": "olleh", "explanation": "Reversing 'hello' gives 'olleh'." }
        ],
        "test_cases": [
            { "input": "python", "output": "nohtyp" },
            { "input": "world", "output": "dlrow" }
        ]
    },
    {
        "title": "Factorial Calculation",
        "description": "The factorial of a number n is defined as n! = n × (n-1) × ... × 1. Given an integer n, compute its factorial.",
        "difficulty": "Easy",
        "task": "Compute the factorial of a given number.",
        "input_format": "A single integer n.",
        "constraints": "0 ≤ n ≤ 15",
        "output_format": "Print the factorial of the given number.",
        "time": 5,
        "examples": [
            { "input": "5", "output": "120", "explanation": "5! = 5 × 4 × 3 × 2 × 1 = 120." }
        ],
        "test_cases": [
            { "input": "3", "output": "6" },
            { "input": "7", "output": "5040" }
        ]
    },
    {
        "title": "String Compression",
        "description": "Given a string, compress it by counting consecutive repeating characters. If compression does not shorten the string, return the original.",
        "difficulty": "Medium",
        "task": "Compress a string using character frequency encoding.",
        "input_format": "A single string s.",
        "constraints": "1 ≤ len(s) ≤ 10^5",
        "output_format": "Print the compressed string.",
        "time": 10,
        "examples": [
          {
            "input": "aabcccccaaa",
            "output": "a2b1c5a3",
            "explanation": "The compressed string 'a2b1c5a3' represents the original input."
          },
          {
            "input": "abc",
            "output": "abc",
            "explanation": "Since compression does not reduce the string size, the original is returned."
          }
        ]
      },
      {
        "title": "Matrix Transposition",
        "description": "Given an MxN matrix, return its transpose.",
        "difficulty": "Medium",
        "task": "Transpose a given matrix.",
        "input_format": "An MxN matrix of integers.",
        "constraints": "1 ≤ M, N ≤ 1000",
        "output_format": "Print the transposed matrix.",
        "time": 10,
        "examples": [
          {
            "input": "[[1, 2, 3], [4, 5, 6]]",
            "output": "[[1, 4], [2, 5], [3, 6]]",
            "explanation": "Rows become columns and vice versa."
          }
        ]
      },
      {
        "title": "Reverse Integer",
        "description": "Given an integer, reverse its digits. If reversing the integer causes an overflow, return 0.",
        "difficulty": "Medium",
        "task": "Reverse the digits of an integer.",
        "input_format": "A single integer n.",
        "constraints": "-2^31 ≤ n ≤ 2^31 - 1",
        "output_format": "Print the reversed integer or 0 if overflow occurs.",
        "time": 10,
        "examples": [
          {
            "input": "123",
            "output": "321",
            "explanation": "The digits are reversed to form 321."
          },
          {
            "input": "-120",
            "output": "-21",
            "explanation": "Leading zeros are removed after reversing."
          }
        ]
      },
      {
        "title": "Two Sum",
        "description": "Given an array and a target sum, return indices of two numbers that add up to the target.",
        "difficulty": "Medium",
        "task": "Find two indices such that nums[i] + nums[j] = target.",
        "input_format": "An array of integers nums and an integer target.",
        "constraints": "2 ≤ len(nums) ≤ 10^4, -10^9 ≤ nums[i], target ≤ 10^9",
        "output_format": "Print the two indices.",
        "time": 10,
        "examples": [
          {
            "input": "[2, 7, 11, 15], 9",
            "output": "[0, 1]",
            "explanation": "nums[0] + nums[1] = 2 + 7 = 9."
          }
        ]
      },
      {
        "title": "Longest Substring Without Repeating Characters",
        "description": "Given a string, find the length of the longest substring without repeating characters.",
        "difficulty": "Medium",
        "task": "Find the longest substring with unique characters.",
        "input_format": "A single string s.",
        "constraints": "0 ≤ len(s) ≤ 10^5",
        "output_format": "Print the length of the longest substring.",
        "time": 10,
        "examples": [
          {
            "input": "abcabcbb",
            "output": "3",
            "explanation": "The longest substring without repeating characters is 'abc'."
          }
        ]
      },
      {
        "title": "Permutations",
        "description": "Given a list of numbers, return all possible permutations.",
        "difficulty": "Medium",
        "task": "Generate all permutations of a given list.",
        "input_format": "A list of integers.",
        "constraints": "1 ≤ len(nums) ≤ 8",
        "output_format": "Print all possible permutations.",
        "time": 10,
        "examples": [
          {
            "input": "[1, 2, 3]",
            "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
            "explanation": "All possible orderings of the numbers."
          }
        ]
      },
      {
        "title": "Binary Search",
        "description": "Given a sorted array and a target value, return the index of the target using binary search. If not found, return -1.",
        "difficulty": "Medium",
        "task": "Perform binary search on a sorted array.",
        "input_format": "A sorted list of integers and a target integer.",
        "constraints": "1 ≤ len(nums) ≤ 10^5",
        "output_format": "Print the index of the target or -1 if not found.",
        "time": 10,
        "examples": [
          {
            "input": "[1, 3, 5, 7, 9], 5",
            "output": "2",
            "explanation": "Element 5 is found at index 2."
          }
        ]
      },
      {
        "title": "Merge Sorted Arrays",
        "description": "Given two sorted arrays, merge them into a single sorted array.",
        "difficulty": "Medium",
        "task": "Merge two sorted arrays efficiently.",
        "input_format": "Two sorted lists of integers.",
        "constraints": "1 ≤ len(nums1), len(nums2) ≤ 10^5",
        "output_format": "Print the merged sorted array.",
        "time": 10,
        "examples": [
          {
            "input": "[1, 3, 5], [2, 4, 6]",
            "output": "[1, 2, 3, 4, 5, 6]",
            "explanation": "The arrays are merged into a sorted list."
          }
        ]
      },
      {
        "title": "Anagram Checker",
        "description": "Given two strings, check if they are anagrams of each other. Two words are anagrams if they contain the same characters in the same frequency.",
        "difficulty": "Medium",
        "task": "Determine if two strings are anagrams.",
        "input_format": "Two strings, s1 and s2.",
        "constraints": "1 ≤ len(s1), len(s2) ≤ 10^5; Only lowercase letters.",
        "output_format": "Print 'True' if anagrams, else 'False'.",
        "time": 10,
        "examples": [
          {
            "input": "\"listen\", \"silent\"",
            "output": "True",
            "explanation": "\"listen\" and \"silent\" have the same characters in the same frequency."
          },
          {
            "input": "\"hello\", \"world\"",
            "output": "False",
            "explanation": "\"hello\" and \"world\" do not contain the same characters."
          }
        ]
      },
      {
        "title": "Merge Intervals",
        "description": "Given a list of intervals, merge all overlapping intervals.",
        "difficulty": "Medium",
        "task": "Merge overlapping intervals.",
        "input_format": "A list of intervals where each interval is represented as [start, end].",
        "constraints": "1 ≤ len(intervals) ≤ 10^4; Intervals may overlap.",
        "output_format": "Print the list of merged intervals.",
        "time": 10,
        "examples": [
          {
            "input": "[[1, 3], [2, 6], [8, 10], [15, 18]]",
            "output": "[[1, 6], [8, 10], [15, 18]]",
            "explanation": "The intervals [1, 3] and [2, 6] overlap and are merged into [1, 6]."
          },
          {
            "input": "[[1, 4], [4, 5]]",
            "output": "[[1, 5]]",
            "explanation": "The intervals [1, 4] and [4, 5] overlap and are merged into [1, 5]."
          }
        ]
      },
      {
        "title": "Edit Distance",
        "description": "Given two strings, find the minimum number of operations required to convert one string into the other.",
        "difficulty": "Hard",
        "task": "Compute the edit distance using insert, delete, or replace operations.",
        "input_format": "Two strings s1 and s2.",
        "constraints": "1 ≤ len(s1), len(s2) ≤ 500.",
        "output_format": "Print the minimum number of operations.",
        "time": 20,
        "examples": [
          {
            "input": "\"horse\", \"ros\"",
            "output": "3",
            "explanation": "Replace 'h' -> 'r', remove 'o', remove 'e'."
          },
          {
            "input": "\"intention\", \"execution\"",
            "output": "5",
            "explanation": "Replace 'i' -> 'e', replace 'n' -> 'x', replace 't' -> 'c', replace 'e' -> 'u', replace 'n' -> 't'."
          }
        ]
      },
      {
        "title": "Word Break Problem",
        "description": "Given a string and a dictionary of words, determine if the string can be segmented into a space-separated sequence of dictionary words.",
        "difficulty": "Hard",
        "task": "Check if the string can be broken into valid words.",
        "input_format": "A string s and a list of words.",
        "constraints": "1 ≤ len(s) ≤ 300; 1 ≤ words.length ≤ 1000.",
        "output_format": "Print 'True' if possible, else 'False'.",
        "time": 20,
        "examples": [
          {
            "input": "\"leetcode\", [\"leet\", \"code\"]",
            "output": "True",
            "explanation": "The string can be split as 'leet code'."
          },
          {
            "input": "\"applepenapple\", [\"apple\", \"pen\"]",
            "output": "True",
            "explanation": "The string can be split as 'apple pen apple'."
          }
        ]
      },
      {
        "title": "Minimum Window Substring",
        "description": "Find the smallest substring in s that contains all characters of t.",
        "difficulty": "Hard",
        "task": "Find and return the minimum window substring.",
        "input_format": "Two strings, s and t.",
        "constraints": "1 ≤ len(s), len(t) ≤ 10^5.",
        "output_format": "Print the smallest substring that contains all characters of t.",
        "time": 20,
        "examples": [
          {
            "input": "\"ADOBECODEBANC\", \"ABC\"",
            "output": "\"BANC\"",
            "explanation": "The smallest substring containing 'A', 'B', and 'C' is 'BANC'."
          }
        ]
      },
      {
        "title": "Sudoku Solver",
        "description": "Solve a given Sudoku puzzle by filling the empty cells.",
        "difficulty": "Hard",
        "task": "Fill in the Sudoku board correctly.",
        "input_format": "A 9x9 grid with some empty cells.",
        "constraints": "Only numbers 1-9 are valid. No duplicate numbers in rows, columns, or subgrids.",
        "output_format": "Print the completed Sudoku board.",
        "time": 20,
        "examples": [
          {
            "input": "[[5,3,'.'],[6,'.','.'],['.','9','8']]",
            "output": "[[5,3,4],[6,7,2],[1,9,8]]",
            "explanation": "The board is solved according to Sudoku rules."
          }
        ]
      },
      {
        "title": "Median of Two Sorted Arrays",
        "description": "Find the median of two sorted arrays.",
        "difficulty": "Hard",
        "task": "Return the median of the combined sorted array.",
        "input_format": "Two sorted arrays nums1 and nums2.",
        "constraints": "0 ≤ len(nums1), len(nums2) ≤ 10^6.",
        "output_format": "Print the median as a float.",
        "time": 20,
        "examples": [
          {
            "input": "[1, 3], [2]",
            "output": "2.0",
            "explanation": "The merged array is [1,2,3] and the median is 2.0."
          }
        ]
      },
      {
        "title": "N-Queens Problem",
        "description": "Place N queens on an N×N chessboard so that no two queens attack each other.",
        "difficulty": "Hard",
        "task": "Print all valid placements of N queens.",
        "input_format": "An integer N.",
        "constraints": "1 ≤ N ≤ 9.",
        "output_format": "Print the board configurations.",
        "time": 20,
        "examples": [
          {
            "input": "4",
            "output": "[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"], [\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]",
            "explanation": "Two possible board configurations for N=4."
          }
        ]
      },
      {
        "title": "Trap Rain Water",
        "description": "Given an array of heights, calculate how much water can be trapped after raining.",
        "difficulty": "Hard",
        "task": "Compute the trapped rainwater volume.",
        "input_format": "An array of non-negative integers representing elevation heights.",
        "constraints": "1 ≤ len(heights) ≤ 10^5.",
        "output_format": "Print the total trapped water.",
        "time": 20,
        "examples": [
          {
            "input": "[0,1,0,2,1,0,1,3,2,1,2,1]",
            "output": "6",
            "explanation": "6 units of water can be trapped."
          }
        ]
      },
      {
        "title": "Kth Largest Element in an Array",
        "description": "Find the Kth largest element in an unsorted array.",
        "difficulty": "Hard",
        "task": "Return the Kth largest element.",
        "input_format": "An array nums and an integer k.",
        "constraints": "1 ≤ len(nums) ≤ 10^5.",
        "output_format": "Print the Kth largest element.",
        "time": 20,
        "examples": [
          {
            "input": "[3,2,1,5,6,4], 2",
            "output": "5",
            "explanation": "The second largest element is 5."
          }
        ]
      },
      {
        "title": "Serialize and Deserialize Binary Tree",
        "description": "Implement methods to serialize and deserialize a binary tree.",
        "difficulty": "Hard",
        "task": "Convert a tree into a string and back to a tree.",
        "input_format": "A binary tree root node.",
        "constraints": "1 ≤ number of nodes ≤ 10^4.",
        "output_format": "Return the serialized and deserialized tree.",
        "time": 20,
        "examples": [
          {
            "input": "[1,2,3,null,null,4,5]",
            "output": "\"1,2,3,null,null,4,5\"",
            "explanation": "The tree is serialized into a string format."
          }
        ]
      },
      {
        "title": "Longest Increasing Subsequence",
        "description": "Find the length of the longest increasing subsequence in an array.",
        "difficulty": "Hard",
        "task": "Compute the longest increasing subsequence.",
        "input_format": "An array of integers nums.",
        "constraints": "1 ≤ len(nums) ≤ 10^4.",
        "output_format": "Print the length of the longest increasing subsequence.",
        "time": 20,
        "examples": [
          {
            "input": "[10,9,2,5,3,7,101,18]",
            "output": "4",
            "explanation": "The LIS is [2,3,7,101] with length 4."
          }
        ]
      }
]
